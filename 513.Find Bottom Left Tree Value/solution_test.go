package leetcode

import (
	"testing"
)

/**
Given the root of a binary tree, return the leftmost value in the last row of
the tree.


 Example 1:


Input: root = [2,1,3]
Output: 1


 Example 2:


Input: root = [1,2,3,4,null,5,6,null,null,7]
Output: 7



 Constraints:


 The number of nodes in the tree is in the range [1, 10‚Å¥].
 -2¬≥¬π <= Node.val <= 2¬≥¬π - 1


 Related Topics Ê†ë Ê∑±Â∫¶‰ºòÂÖàÊêúÁ¥¢ ÂπøÂ∫¶‰ºòÂÖàÊêúÁ¥¢ ‰∫åÂèâÊ†ë üëç 428 üëé 0

*/

type ListNode struct {
	Val  int
	Next *ListNode
}

type TreeNode struct {
	Val   int
	Left  *TreeNode
	Right *TreeNode
}

//leetcode submit region begin(Prohibit modification and deletion)
/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func findBottomLeftValue(root *TreeNode) int {

	var (
		ans, maxDepth int
	)

	// ‰∏∫‰ªÄ‰πàËøôÊ†∑ÂèØ‰ª•
	// ÈááÁî®ÂêéÂ∫èÈÅçÂéÜÔºåÈÅçÂéÜÈ°∫Â∫è‰∏∫ Â∑¶Âè≥‰∏≠
	// ÂÅáËÆæÊúÄÂêé‰∏ÄÂ±ÇÊúâÂ§ö‰∏™ËäÇÁÇπÔºåÂÖàÂ∑¶Âè≥ÔºåÂ∑¶‰æßÁªìÁÇπ‰∏ÄÂÆöÂÖàË¢´ËÆ∞ÂΩïÂà∞ ansÔºåÂÜçÂà∞Âè≥‰æßÁªìÁÇπÔºådepth <= maxDepth
	// ÂÅáËÆæÊúÄÂêé‰∏ÄÂ±ÇÂè™Êúâ‰∏Ä‰∏™ËäÇÁÇπÔºåÊó†ËÆ∫ËØ•ËäÇÁÇπÊòØÂ∑¶ËøòÊòØÂè≥ÁªìÁÇπÔºåÈÉΩ‰∏ÄÊ†∑

	var postorder func(node *TreeNode, depth int)
	postorder = func(node *TreeNode, depth int) {

		if node.Left != nil {
			postorder(node.Left, depth+1)
		}

		if node.Right != nil {
			postorder(node.Right, depth+1)
		}

		if depth > maxDepth {
			maxDepth = depth
			ans = node.Val
		}

	}

	postorder(root, 1)

	return ans
}

//leetcode submit region end(Prohibit modification and deletion)

func TestFindBottomLeftTreeValue(t *testing.T) {

}
