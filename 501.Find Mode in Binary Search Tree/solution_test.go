package leetcode

import (
	"testing"
)

/**
Given the root of a binary search tree (BST) with duplicates, return all the
mode(s) (i.e., the most frequently occurred element) in it.

 If the tree has more than one mode, return them in any order.

 Assume a BST is defined as follows:


 The left subtree of a node contains only nodes with keys less than or equal to
the node's key.
 The right subtree of a node contains only nodes with keys greater than or
equal to the node's key.
 Both the left and right subtrees must also be binary search trees.



 Example 1:


Input: root = [1,null,2,2]
Output: [2]


 Example 2:


Input: root = [0]
Output: [0]



 Constraints:


 The number of nodes in the tree is in the range [1, 10‚Å¥].
 -10‚Åµ <= Node.val <= 10‚Åµ



Follow up: Could you do that without using any extra space? (Assume that the
implicit stack space incurred due to recursion does not count).

 Related Topics Ê†ë Ê∑±Â∫¶‰ºòÂÖàÊêúÁ¥¢ ‰∫åÂèâÊêúÁ¥¢Ê†ë ‰∫åÂèâÊ†ë üëç 576 üëé 0

*/

type ListNode struct {
	Val  int
	Next *ListNode
}

type TreeNode struct {
	Val   int
	Left  *TreeNode
	Right *TreeNode
}

//leetcode submit region begin(Prohibit modification and deletion)
/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func findMode(root *TreeNode) []int {

	var ans []int
	var prev, cnt, maxCnt int
	// Ê≠§Â§Ñ cnt ÈúÄË¶ÅÂÆö‰πâÊàêÂÖ®Â±ÄÂèòÈáè
	// Âú®‰∏≠Â∫èÈÅçÂéÜ‰∏≠ÔºåÂèØËÉΩÂ∑¶Â≠êÊ†ëÁöÑÊúÄÂè≥‰æßÁªìÁÇπÂÖàÂºÄÂßãËÆ°Êï∞
	// Â¶ÇÊûúÂ∞Ü cnt ÊîæÂà∞ÊØè‰∏Ä‰∏™ÈÄíÂΩíÂáΩÊï∞ÔºåÂàôÂèØËÉΩÂΩìÂ∑¶Â≠êÊ†ëÈÅçÂéÜÂÆåÊàêÂõûÂà∞Ê†πËäÇÁÇπÊó∂Ôºåcnt ‰ºöÈáçÊñ∞ËÆ°Êï∞

	var inorder func(node *TreeNode)
	inorder = func(node *TreeNode) {
		if node == nil {
			return
		}

		inorder(node.Left)

		if prev == node.Val {
			cnt++
		} else {
			cnt = 1
			prev = node.Val
		}

		if cnt == maxCnt {

			ans = append(ans, prev)
		} else if cnt > maxCnt {
			ans = []int{prev}
			maxCnt = cnt
		}

		inorder(node.Right)
	}

	inorder(root)

	return ans
}

//leetcode submit region end(Prohibit modification and deletion)

func TestFindModeInBinarySearchTree(t *testing.T) {

}
